
knx_uart_tp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003908  08003908  00004908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003934  08003934  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003934  08003934  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003934  08003934  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003938  08003938  00004938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800393c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003948  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003948  00005144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c155  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfc  00000000  00000000  0001118a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00012e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bc  00000000  00000000  00013af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017975  00000000  00000000  000144ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daef  00000000  00000000  0002be21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a7cb  00000000  00000000  00039910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c40db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033ac  00000000  00000000  000c4120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000c74cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080038f0 	.word	0x080038f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080038f0 	.word	0x080038f0

0800014c <start_knx_decode>:
    
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*)dma_buf, dma_len);
}

void start_knx_decode(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	rx_bitcount = 0;
 8000150:	4b16      	ldr	r3, [pc, #88]	@ (80001ac <start_knx_decode+0x60>)
 8000152:	2200      	movs	r2, #0
 8000154:	701a      	strb	r2, [r3, #0]
    rx_byte = 0;
 8000156:	4b16      	ldr	r3, [pc, #88]	@ (80001b0 <start_knx_decode+0x64>)
 8000158:	2200      	movs	r2, #0
 800015a:	701a      	strb	r2, [r3, #0]
    rx_index = 0;
 800015c:	4b15      	ldr	r3, [pc, #84]	@ (80001b4 <start_knx_decode+0x68>)
 800015e:	2200      	movs	r2, #0
 8000160:	701a      	strb	r2, [r3, #0]
    frame_ready = 0;
 8000162:	4b15      	ldr	r3, [pc, #84]	@ (80001b8 <start_knx_decode+0x6c>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]
    half_seen = 0;
 8000168:	4b14      	ldr	r3, [pc, #80]	@ (80001bc <start_knx_decode+0x70>)
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
    waiting_for_bit = 0;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <start_knx_decode+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	701a      	strb	r2, [r3, #0]
    last_capture = 0;
 8000174:	4b13      	ldr	r3, [pc, #76]	@ (80001c4 <start_knx_decode+0x78>)
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
    last_bit_time = 0;
 800017a:	4b13      	ldr	r3, [pc, #76]	@ (80001c8 <start_knx_decode+0x7c>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
    frame_timeout = 0;
 8000180:	4b12      	ldr	r3, [pc, #72]	@ (80001cc <start_knx_decode+0x80>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
    knx_state = KNX_IDLE;  
 8000186:	4b12      	ldr	r3, [pc, #72]	@ (80001d0 <start_knx_decode+0x84>)
 8000188:	2200      	movs	r2, #0
 800018a:	701a      	strb	r2, [r3, #0]
    data_bits = 0;
 800018c:	4b11      	ldr	r3, [pc, #68]	@ (80001d4 <start_knx_decode+0x88>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
    parity_bit = 0;
 8000192:	4b11      	ldr	r3, [pc, #68]	@ (80001d8 <start_knx_decode+0x8c>)
 8000194:	2200      	movs	r2, #0
 8000196:	701a      	strb	r2, [r3, #0]
    parity_count = 0;
 8000198:	4b10      	ldr	r3, [pc, #64]	@ (80001dc <start_knx_decode+0x90>)
 800019a:	2200      	movs	r2, #0
 800019c:	701a      	strb	r2, [r3, #0]
    
    HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 800019e:	2108      	movs	r1, #8
 80001a0:	480f      	ldr	r0, [pc, #60]	@ (80001e0 <start_knx_decode+0x94>)
 80001a2:	f002 f85d 	bl	8002260 <HAL_TIM_IC_Start_IT>
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	2000010d 	.word	0x2000010d
 80001b0:	2000010e 	.word	0x2000010e
 80001b4:	20000130 	.word	0x20000130
 80001b8:	20000131 	.word	0x20000131
 80001bc:	2000010c 	.word	0x2000010c
 80001c0:	20000132 	.word	0x20000132
 80001c4:	20000108 	.word	0x20000108
 80001c8:	20000134 	.word	0x20000134
 80001cc:	20000138 	.word	0x20000138
 80001d0:	20000139 	.word	0x20000139
 80001d4:	2000013a 	.word	0x2000013a
 80001d8:	2000013b 	.word	0x2000013b
 80001dc:	2000013c 	.word	0x2000013c
 80001e0:	20000034 	.word	0x20000034

080001e4 <check_frame_timeout>:

void check_frame_timeout(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
    uint32_t now = HAL_GetTick();
 80001ea:	f000 fd9b 	bl	8000d24 <HAL_GetTick>
 80001ee:	6078      	str	r0, [r7, #4]
    
    if (waiting_for_bit && (now - last_bit_time) > 200) {
 80001f0:	4b22      	ldr	r3, [pc, #136]	@ (800027c <check_frame_timeout+0x98>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d01a      	beq.n	8000230 <check_frame_timeout+0x4c>
 80001fa:	4b21      	ldr	r3, [pc, #132]	@ (8000280 <check_frame_timeout+0x9c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	1ad3      	subs	r3, r2, r3
 8000202:	2bc8      	cmp	r3, #200	@ 0xc8
 8000204:	d914      	bls.n	8000230 <check_frame_timeout+0x4c>
        knx_state = KNX_IDLE;  // idle
 8000206:	4b1f      	ldr	r3, [pc, #124]	@ (8000284 <check_frame_timeout+0xa0>)
 8000208:	2200      	movs	r2, #0
 800020a:	701a      	strb	r2, [r3, #0]
        data_bits = 0;
 800020c:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <check_frame_timeout+0xa4>)
 800020e:	2200      	movs	r2, #0
 8000210:	701a      	strb	r2, [r3, #0]
        parity_count = 0;
 8000212:	4b1e      	ldr	r3, [pc, #120]	@ (800028c <check_frame_timeout+0xa8>)
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
        rx_byte = 0;
 8000218:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <check_frame_timeout+0xac>)
 800021a:	2200      	movs	r2, #0
 800021c:	701a      	strb	r2, [r3, #0]
        half_seen = 0;
 800021e:	4b1d      	ldr	r3, [pc, #116]	@ (8000294 <check_frame_timeout+0xb0>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
        waiting_for_bit = 0;
 8000224:	4b15      	ldr	r3, [pc, #84]	@ (800027c <check_frame_timeout+0x98>)
 8000226:	2200      	movs	r2, #0
 8000228:	701a      	strb	r2, [r3, #0]
        frame_timeout = 1;
 800022a:	4b1b      	ldr	r3, [pc, #108]	@ (8000298 <check_frame_timeout+0xb4>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
    }
    
    // Nếu đang nhận frame và quá 500ms không có bit nào
    if (knx_state != KNX_IDLE && (now - last_bit_time) > 500) {
 8000230:	4b14      	ldr	r3, [pc, #80]	@ (8000284 <check_frame_timeout+0xa0>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	2b00      	cmp	r3, #0
 8000238:	d01b      	beq.n	8000272 <check_frame_timeout+0x8e>
 800023a:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <check_frame_timeout+0x9c>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000246:	d914      	bls.n	8000272 <check_frame_timeout+0x8e>
        knx_state = KNX_IDLE;
 8000248:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <check_frame_timeout+0xa0>)
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
        data_bits = 0;
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <check_frame_timeout+0xa4>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
        parity_count = 0;
 8000254:	4b0d      	ldr	r3, [pc, #52]	@ (800028c <check_frame_timeout+0xa8>)
 8000256:	2200      	movs	r2, #0
 8000258:	701a      	strb	r2, [r3, #0]
        rx_byte = 0;
 800025a:	4b0d      	ldr	r3, [pc, #52]	@ (8000290 <check_frame_timeout+0xac>)
 800025c:	2200      	movs	r2, #0
 800025e:	701a      	strb	r2, [r3, #0]
        half_seen = 0;
 8000260:	4b0c      	ldr	r3, [pc, #48]	@ (8000294 <check_frame_timeout+0xb0>)
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
        waiting_for_bit = 0;
 8000266:	4b05      	ldr	r3, [pc, #20]	@ (800027c <check_frame_timeout+0x98>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
        frame_timeout = 1;
 800026c:	4b0a      	ldr	r3, [pc, #40]	@ (8000298 <check_frame_timeout+0xb4>)
 800026e:	2201      	movs	r2, #1
 8000270:	701a      	strb	r2, [r3, #0]
    }
}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	20000132 	.word	0x20000132
 8000280:	20000134 	.word	0x20000134
 8000284:	20000139 	.word	0x20000139
 8000288:	2000013a 	.word	0x2000013a
 800028c:	2000013c 	.word	0x2000013c
 8000290:	2000010e 	.word	0x2000010e
 8000294:	2000010c 	.word	0x2000010c
 8000298:	20000138 	.word	0x20000138

0800029c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a0:	f000 fce8 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a4:	f000 f830 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a8:	f000 f99c 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80002ac:	f000 f97c 	bl	80005a8 <MX_DMA_Init>
  MX_IWDG_Init();
 80002b0:	f000 f86c 	bl	800038c <MX_IWDG_Init>
  MX_TIM1_Init();
 80002b4:	f000 f884 	bl	80003c0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80002b8:	f000 f94c 	bl	8000554 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_IWDG_Refresh(&hiwdg);
 80002bc:	480d      	ldr	r0, [pc, #52]	@ (80002f4 <main+0x58>)
 80002be:	f001 f9e9 	bl	8001694 <HAL_IWDG_Refresh>
  start_knx_decode();
 80002c2:	f7ff ff43 	bl	800014c <start_knx_decode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    check_frame_timeout();
 80002c6:	f7ff ff8d 	bl	80001e4 <check_frame_timeout>
    
    if (frame_ready) {
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <main+0x5c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00b      	beq.n	80002ec <main+0x50>
        frame_ready = 0;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <main+0x5c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)rx_frame, rx_index, 100);
 80002da:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <main+0x60>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	461a      	mov	r2, r3
 80002e2:	2364      	movs	r3, #100	@ 0x64
 80002e4:	4906      	ldr	r1, [pc, #24]	@ (8000300 <main+0x64>)
 80002e6:	4807      	ldr	r0, [pc, #28]	@ (8000304 <main+0x68>)
 80002e8:	f003 f901 	bl	80034ee <HAL_UART_Transmit>
    }

    HAL_IWDG_Refresh(&hiwdg);
 80002ec:	4801      	ldr	r0, [pc, #4]	@ (80002f4 <main+0x58>)
 80002ee:	f001 f9d1 	bl	8001694 <HAL_IWDG_Refresh>
    check_frame_timeout();
 80002f2:	e7e8      	b.n	80002c6 <main+0x2a>
 80002f4:	20000028 	.word	0x20000028
 80002f8:	20000131 	.word	0x20000131
 80002fc:	20000130 	.word	0x20000130
 8000300:	20000110 	.word	0x20000110
 8000304:	200000c0 	.word	0x200000c0

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	@ 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fabe 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800032a:	230a      	movs	r3, #10
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000336:	2301      	movs	r3, #1
 8000338:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800033a:	2302      	movs	r3, #2
 800033c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800033e:	2300      	movs	r3, #0
 8000340:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000342:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000346:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	f107 0318 	add.w	r3, r7, #24
 800034c:	4618      	mov	r0, r3
 800034e:	f001 f9b1 	bl	80016b4 <HAL_RCC_OscConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000358:	f000 fad2 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035c:	230f      	movs	r3, #15
 800035e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000360:	2302      	movs	r3, #2
 8000362:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2101      	movs	r1, #1
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fc1f 	bl	8001bb8 <HAL_RCC_ClockConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000380:	f000 fabe 	bl	8000900 <Error_Handler>
  }
}
 8000384:	bf00      	nop
 8000386:	3740      	adds	r7, #64	@ 0x40
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000390:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_IWDG_Init+0x2c>)
 8000392:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <MX_IWDG_Init+0x30>)
 8000394:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000396:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <MX_IWDG_Init+0x2c>)
 8000398:	2203      	movs	r2, #3
 800039a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_IWDG_Init+0x2c>)
 800039e:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80003a2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <MX_IWDG_Init+0x2c>)
 80003a6:	f001 f931 	bl	800160c <HAL_IWDG_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80003b0:	f000 faa6 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40003000 	.word	0x40003000

080003c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09a      	sub	sp, #104	@ 0x68
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	2220      	movs	r2, #32
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f003 fa46 	bl	8003898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800040c:	4b4f      	ldr	r3, [pc, #316]	@ (800054c <MX_TIM1_Init+0x18c>)
 800040e:	4a50      	ldr	r2, [pc, #320]	@ (8000550 <MX_TIM1_Init+0x190>)
 8000410:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8000412:	4b4e      	ldr	r3, [pc, #312]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000414:	2223      	movs	r2, #35	@ 0x23
 8000416:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b4c      	ldr	r3, [pc, #304]	@ (800054c <MX_TIM1_Init+0x18c>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 103;
 800041e:	4b4b      	ldr	r3, [pc, #300]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000420:	2267      	movs	r2, #103	@ 0x67
 8000422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b49      	ldr	r3, [pc, #292]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800042a:	4b48      	ldr	r3, [pc, #288]	@ (800054c <MX_TIM1_Init+0x18c>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b46      	ldr	r3, [pc, #280]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000436:	4845      	ldr	r0, [pc, #276]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000438:	f001 fd4c 	bl	8001ed4 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8000442:	f000 fa5d 	bl	8000900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800044a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000450:	4619      	mov	r1, r3
 8000452:	483e      	ldr	r0, [pc, #248]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000454:	f002 fa5e 	bl	8002914 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800045e:	f000 fa4f 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000462:	483a      	ldr	r0, [pc, #232]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000464:	f001 fd85 	bl	8001f72 <HAL_TIM_PWM_Init>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800046e:	f000 fa47 	bl	8000900 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000472:	4836      	ldr	r0, [pc, #216]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000474:	f001 fe9c 	bl	80021b0 <HAL_TIM_IC_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800047e:	f000 fa3f 	bl	8000900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000482:	2300      	movs	r3, #0
 8000484:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000486:	2300      	movs	r3, #0
 8000488:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800048a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800048e:	4619      	mov	r1, r3
 8000490:	482e      	ldr	r0, [pc, #184]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000492:	f002 ff1b 	bl	80032cc <HAL_TIMEx_MasterConfigSynchronization>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 800049c:	f000 fa30 	bl	8000900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80004a0:	2370      	movs	r3, #112	@ 0x70
 80004a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004a8:	2300      	movs	r3, #0
 80004aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004ac:	2300      	movs	r3, #0
 80004ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004b0:	2300      	movs	r3, #0
 80004b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80004c0:	2204      	movs	r2, #4
 80004c2:	4619      	mov	r1, r3
 80004c4:	4821      	ldr	r0, [pc, #132]	@ (800054c <MX_TIM1_Init+0x18c>)
 80004c6:	f002 f963 	bl	8002790 <HAL_TIM_PWM_ConfigChannel>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80004d0:	f000 fa16 	bl	8000900 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004d4:	2300      	movs	r3, #0
 80004d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004d8:	2301      	movs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigIC.ICFilter = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80004e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004e8:	2208      	movs	r2, #8
 80004ea:	4619      	mov	r1, r3
 80004ec:	4817      	ldr	r0, [pc, #92]	@ (800054c <MX_TIM1_Init+0x18c>)
 80004ee:	f002 f8b3 	bl	8002658 <HAL_TIM_IC_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80004f8:	f000 fa02 	bl	8000900 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004fc:	2300      	movs	r3, #0
 80004fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000510:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000514:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	4619      	mov	r1, r3
 800051e:	480b      	ldr	r0, [pc, #44]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000520:	f002 ff32 	bl	8003388 <HAL_TIMEx_ConfigBreakDeadTime>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x16e>
  {
    Error_Handler();
 800052a:	f000 f9e9 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	68da      	ldr	r2, [r3, #12]
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f042 0201 	orr.w	r2, r2, #1
 800053c:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800053e:	4803      	ldr	r0, [pc, #12]	@ (800054c <MX_TIM1_Init+0x18c>)
 8000540:	f000 fa9a 	bl	8000a78 <HAL_TIM_MspPostInit>

}
 8000544:	bf00      	nop
 8000546:	3768      	adds	r7, #104	@ 0x68
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000034 	.word	0x20000034
 8000550:	40012c00 	.word	0x40012c00

08000554 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000558:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <MX_USART2_UART_Init+0x50>)
 800055c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800055e:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 8000560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000564:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800056c:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 800057a:	220c      	movs	r2, #12
 800057c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057e:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800058a:	4805      	ldr	r0, [pc, #20]	@ (80005a0 <MX_USART2_UART_Init+0x4c>)
 800058c:	f002 ff5f 	bl	800344e <HAL_UART_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000596:	f000 f9b3 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	200000c0 	.word	0x200000c0
 80005a4:	40004400 	.word	0x40004400

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a0b      	ldr	r2, [pc, #44]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200d      	movs	r0, #13
 80005cc:	f000 fc8b 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80005d0:	200d      	movs	r0, #13
 80005d2:	f000 fca4 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <MX_GPIO_Init+0x28>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a07      	ldr	r2, [pc, #28]	@ (800060c <MX_GPIO_Init+0x28>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <MX_GPIO_Init+0x28>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Ngắt tràn timer - xử lý bit 1 (không có pulse)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && waiting_for_bit) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a45      	ldr	r2, [pc, #276]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800061e:	4293      	cmp	r3, r2
 8000620:	f040 8084 	bne.w	800072c <HAL_TIM_PeriodElapsedCallback+0x11c>
 8000624:	4b44      	ldr	r3, [pc, #272]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d07e      	beq.n	800072c <HAL_TIM_PeriodElapsedCallback+0x11c>
        // Timer tràn sau 104µs => bit 1
        last_bit_time = HAL_GetTick();
 800062e:	f000 fb79 	bl	8000d24 <HAL_GetTick>
 8000632:	4603      	mov	r3, r0
 8000634:	4a41      	ldr	r2, [pc, #260]	@ (800073c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000636:	6013      	str	r3, [r2, #0]
        
        switch (knx_state) {
 8000638:	4b41      	ldr	r3, [pc, #260]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b04      	cmp	r3, #4
 8000640:	d871      	bhi.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x116>
 8000642:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	0800065d 	.word	0x0800065d
 800064c:	08000665 	.word	0x08000665
 8000650:	0800066d 	.word	0x0800066d
 8000654:	080006b3 	.word	0x080006b3
 8000658:	080006c1 	.word	0x080006c1
            case KNX_IDLE:
                knx_state = KNX_IDLE;
 800065c:	4b38      	ldr	r3, [pc, #224]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
                break;
 8000662:	e060      	b.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x116>
                
            case KNX_START:
                knx_state = KNX_IDLE;
 8000664:	4b36      	ldr	r3, [pc, #216]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
                break;
 800066a:	e05c      	b.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x116>
                
            case KNX_DATA:
                rx_byte = (rx_byte << 1) | 1;  
 800066c:	4b35      	ldr	r3, [pc, #212]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	b25b      	sxtb	r3, r3
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	b25b      	sxtb	r3, r3
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	b25b      	sxtb	r3, r3
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b30      	ldr	r3, [pc, #192]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000682:	701a      	strb	r2, [r3, #0]
                data_bits++;
 8000684:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b2e      	ldr	r3, [pc, #184]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000690:	701a      	strb	r2, [r3, #0]
                parity_count++;  
 8000692:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800069e:	701a      	strb	r2, [r3, #0]
                
                if (data_bits == 8) {
 80006a0:	4b29      	ldr	r3, [pc, #164]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b08      	cmp	r3, #8
 80006a8:	d13c      	bne.n	8000724 <HAL_TIM_PeriodElapsedCallback+0x114>
                    knx_state = KNX_PARITY;  
 80006aa:	4b25      	ldr	r3, [pc, #148]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006ac:	2203      	movs	r2, #3
 80006ae:	701a      	strb	r2, [r3, #0]
                }
                break;
 80006b0:	e038      	b.n	8000724 <HAL_TIM_PeriodElapsedCallback+0x114>
                
            case KNX_PARITY: 
                parity_bit = 1;
 80006b2:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	701a      	strb	r2, [r3, #0]
                knx_state = KNX_STOP; 
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80006ba:	2204      	movs	r2, #4
 80006bc:	701a      	strb	r2, [r3, #0]
                break;
 80006be:	e032      	b.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x116>
                
            case KNX_STOP:
                if ((parity_count % 2) == 0) {
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d11c      	bne.n	800070a <HAL_TIM_PeriodElapsedCallback+0xfa>
                    if (rx_index < 32) {
 80006d0:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b1f      	cmp	r3, #31
 80006d8:	d80c      	bhi.n	80006f4 <HAL_TIM_PeriodElapsedCallback+0xe4>
                        rx_frame[rx_index++] = rx_byte;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	1c5a      	adds	r2, r3, #1
 80006e2:	b2d1      	uxtb	r1, r2
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80006e6:	7011      	strb	r1, [r2, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b2d9      	uxtb	r1, r3
 80006f0:	4b19      	ldr	r3, [pc, #100]	@ (8000758 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80006f2:	5499      	strb	r1, [r3, r2]
                    }
                    
                    if (rx_index >= 32) {
 80006f4:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2b1f      	cmp	r3, #31
 80006fc:	d905      	bls.n	800070a <HAL_TIM_PeriodElapsedCallback+0xfa>
                        frame_ready = 1;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
                        rx_index = 0;
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
                    }
                }
                knx_state = KNX_IDLE;
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
                data_bits = 0;
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
                parity_count = 0;
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
                rx_byte = 0;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
                break;
 8000722:	e000      	b.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x116>
                break;
 8000724:	bf00      	nop
        }
        
        waiting_for_bit = 0;  // reset flag
 8000726:	4b04      	ldr	r3, [pc, #16]	@ (8000738 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
    }
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40012c00 	.word	0x40012c00
 8000738:	20000132 	.word	0x20000132
 800073c:	20000134 	.word	0x20000134
 8000740:	20000139 	.word	0x20000139
 8000744:	2000010e 	.word	0x2000010e
 8000748:	2000013a 	.word	0x2000013a
 800074c:	2000013c 	.word	0x2000013c
 8000750:	2000013b 	.word	0x2000013b
 8000754:	20000130 	.word	0x20000130
 8000758:	20000110 	.word	0x20000110
 800075c:	20000131 	.word	0x20000131

08000760 <HAL_TIM_IC_CaptureCallback>:

// Ngắt Input Capture - xử lý bit 0 (có pulse)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a4d      	ldr	r2, [pc, #308]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800076e:	4293      	cmp	r3, r2
 8000770:	f040 8095 	bne.w	800089e <HAL_TIM_IC_CaptureCallback+0x13e>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7f1b      	ldrb	r3, [r3, #28]
 8000778:	2b04      	cmp	r3, #4
 800077a:	f040 8090 	bne.w	800089e <HAL_TIM_IC_CaptureCallback+0x13e>
		uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800077e:	2108      	movs	r1, #8
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f002 f98f 	bl	8002aa4 <HAL_TIM_ReadCapturedValue>
 8000786:	60f8      	str	r0, [r7, #12]
		uint32_t delta = capture - last_capture;
 8000788:	4b47      	ldr	r3, [pc, #284]	@ (80008a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	60bb      	str	r3, [r7, #8]
		last_capture = capture;
 8000792:	4a45      	ldr	r2, [pc, #276]	@ (80008a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	6013      	str	r3, [r2, #0]

        if (!half_seen) {
 8000798:	4b44      	ldr	r3, [pc, #272]	@ (80008ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10b      	bne.n	80007ba <HAL_TIM_IC_CaptureCallback+0x5a>
            // Thấy cạnh Rising (bắt đầu bit 0)
            half_seen = 1;
 80007a2:	4b42      	ldr	r3, [pc, #264]	@ (80008ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
            waiting_for_bit = 1;  
 80007a8:	4b41      	ldr	r3, [pc, #260]	@ (80008b0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
            last_bit_time = HAL_GetTick();  
 80007ae:	f000 fab9 	bl	8000d24 <HAL_GetTick>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a3f      	ldr	r2, [pc, #252]	@ (80008b4 <HAL_TIM_IC_CaptureCallback+0x154>)
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	e05e      	b.n	8000878 <HAL_TIM_IC_CaptureCallback+0x118>
        } else {
            // Thấy cạnh Falling
            if (delta > (T0_HIGH - T0_TOL) && delta < (T0_HIGH + T0_TOL)) {
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	2b19      	cmp	r3, #25
 80007be:	d94e      	bls.n	800085e <HAL_TIM_IC_CaptureCallback+0xfe>
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	2b2c      	cmp	r3, #44	@ 0x2c
 80007c4:	d84b      	bhi.n	800085e <HAL_TIM_IC_CaptureCallback+0xfe>
                // Đây là pulse High ~35 µs => bit 0
                last_bit_time = HAL_GetTick();
 80007c6:	f000 faad 	bl	8000d24 <HAL_GetTick>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a39      	ldr	r2, [pc, #228]	@ (80008b4 <HAL_TIM_IC_CaptureCallback+0x154>)
 80007ce:	6013      	str	r3, [r2, #0]
                
                switch (knx_state) {
 80007d0:	4b39      	ldr	r3, [pc, #228]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d848      	bhi.n	800086c <HAL_TIM_IC_CaptureCallback+0x10c>
 80007da:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <HAL_TIM_IC_CaptureCallback+0x80>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f5 	.word	0x080007f5
 80007e4:	080007fd 	.word	0x080007fd
 80007e8:	08000817 	.word	0x08000817
 80007ec:	08000845 	.word	0x08000845
 80007f0:	08000853 	.word	0x08000853
                    case KNX_IDLE: 
                        knx_state = KNX_START;  
 80007f4:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
                        break;
 80007fa:	e02f      	b.n	800085c <HAL_TIM_IC_CaptureCallback+0xfc>
                        
                    case KNX_START: 
                        knx_state = KNX_DATA;  
 80007fc:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80007fe:	2202      	movs	r2, #2
 8000800:	701a      	strb	r2, [r3, #0]
                        data_bits = 0;
 8000802:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
                        parity_count = 0;
 8000808:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <HAL_TIM_IC_CaptureCallback+0x160>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
                        rx_byte = 0;
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
                        break;
 8000814:	e022      	b.n	800085c <HAL_TIM_IC_CaptureCallback+0xfc>
                        
                    case KNX_DATA: 
                        rx_byte = (rx_byte << 1);  
 8000816:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4b28      	ldr	r3, [pc, #160]	@ (80008c4 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000822:	701a      	strb	r2, [r3, #0]
                        data_bits++;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	3301      	adds	r3, #1
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000830:	701a      	strb	r2, [r3, #0]
                        
                        if (data_bits == 8) {
 8000832:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <HAL_TIM_IC_CaptureCallback+0x15c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b2db      	uxtb	r3, r3
 8000838:	2b08      	cmp	r3, #8
 800083a:	d10e      	bne.n	800085a <HAL_TIM_IC_CaptureCallback+0xfa>
                            knx_state = KNX_PARITY;  
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800083e:	2203      	movs	r2, #3
 8000840:	701a      	strb	r2, [r3, #0]
                        }
                        break;
 8000842:	e00a      	b.n	800085a <HAL_TIM_IC_CaptureCallback+0xfa>
                        
                    case KNX_PARITY: 
                        parity_bit = 0;
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
                        knx_state = KNX_STOP;  
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800084c:	2204      	movs	r2, #4
 800084e:	701a      	strb	r2, [r3, #0]
                        break;
 8000850:	e004      	b.n	800085c <HAL_TIM_IC_CaptureCallback+0xfc>
                        
                    case KNX_STOP: 
                        knx_state = KNX_IDLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
                        break;
 8000858:	e000      	b.n	800085c <HAL_TIM_IC_CaptureCallback+0xfc>
                        break;
 800085a:	bf00      	nop
                switch (knx_state) {
 800085c:	e006      	b.n	800086c <HAL_TIM_IC_CaptureCallback+0x10c>
                }
            } else {
                // Pulse không hợp lệ - có thể là noise
                half_seen = 0;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
                waiting_for_bit = 0;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
                return;
 800086a:	e018      	b.n	800089e <HAL_TIM_IC_CaptureCallback+0x13e>
            }
            half_seen = 0;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <HAL_TIM_IC_CaptureCallback+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
            waiting_for_bit = 0;  // đã nhận xong bit
 8000872:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
        }

		if ((TIM1->CCER & TIM_CCER_CC3P) == 0) {
 8000878:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000880:	2b00      	cmp	r3, #0
 8000882:	d106      	bne.n	8000892 <HAL_TIM_IC_CaptureCallback+0x132>
			// đang rising -> chuyển sang falling
			TIM1->CCER |= TIM_CCER_CC3P;
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	4a06      	ldr	r2, [pc, #24]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800088a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800088e:	6213      	str	r3, [r2, #32]
 8000890:	e005      	b.n	800089e <HAL_TIM_IC_CaptureCallback+0x13e>
		} else {
			// đang falling -> chuyển sang rising
			TIM1->CCER &= ~TIM_CCER_CC3P;
 8000892:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8000898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800089c:	6213      	str	r3, [r2, #32]
		}
    }
}
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40012c00 	.word	0x40012c00
 80008a8:	20000108 	.word	0x20000108
 80008ac:	2000010c 	.word	0x2000010c
 80008b0:	20000132 	.word	0x20000132
 80008b4:	20000134 	.word	0x20000134
 80008b8:	20000139 	.word	0x20000139
 80008bc:	2000013a 	.word	0x2000013a
 80008c0:	2000013c 	.word	0x2000013c
 80008c4:	2000010e 	.word	0x2000010e
 80008c8:	2000013b 	.word	0x2000013b

080008cc <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback khi DMA encode hoàn thành
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a07      	ldr	r2, [pc, #28]	@ (80008f8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d107      	bne.n	80008ee <HAL_TIM_PWM_PulseFinishedCallback+0x22>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	7f1b      	ldrb	r3, [r3, #28]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d103      	bne.n	80008ee <HAL_TIM_PWM_PulseFinishedCallback+0x22>
        HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_2);
 80008e6:	2104      	movs	r1, #4
 80008e8:	4804      	ldr	r0, [pc, #16]	@ (80008fc <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80008ea:	f001 fb9b 	bl	8002024 <HAL_TIM_PWM_Stop_DMA>
        
    }
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	20000034 	.word	0x20000034

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <HAL_MspInit+0x5c>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <HAL_MspInit+0x5c>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6193      	str	r3, [r2, #24]
 800091e:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <HAL_MspInit+0x5c>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x5c>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x5c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x5c>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000942:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <HAL_MspInit+0x60>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	4a04      	ldr	r2, [pc, #16]	@ (800096c <HAL_MspInit+0x60>)
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40021000 	.word	0x40021000
 800096c:	40010000 	.word	0x40010000

08000970 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a36      	ldr	r2, [pc, #216]	@ (8000a64 <HAL_TIM_Base_MspInit+0xf4>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d164      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0xea>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000990:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a34      	ldr	r2, [pc, #208]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 8000996:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <HAL_TIM_Base_MspInit+0xf8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0310 	add.w	r3, r7, #16
 80009d2:	4619      	mov	r1, r3
 80009d4:	4825      	ldr	r0, [pc, #148]	@ (8000a6c <HAL_TIM_Base_MspInit+0xfc>)
 80009d6:	f000 fc95 	bl	8001304 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 80009da:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009dc:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <HAL_TIM_Base_MspInit+0x104>)
 80009de:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009e0:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009e2:	2210      	movs	r2, #16
 80009e4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e6:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80009ec:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009ee:	2280      	movs	r2, #128	@ 0x80
 80009f0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 80009fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a00:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000a02:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000a0e:	4818      	ldr	r0, [pc, #96]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 8000a10:	f000 faa0 	bl	8000f54 <HAL_DMA_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_TIM_Base_MspInit+0xae>
    {
      Error_Handler();
 8000a1a:	f7ff ff71 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a13      	ldr	r2, [pc, #76]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <HAL_TIM_Base_MspInit+0x100>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2018      	movs	r0, #24
 8000a30:	f000 fa59 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000a34:	2018      	movs	r0, #24
 8000a36:	f000 fa72 	bl	8000f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2019      	movs	r0, #25
 8000a40:	f000 fa51 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a44:	2019      	movs	r0, #25
 8000a46:	f000 fa6a 	bl	8000f1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201b      	movs	r0, #27
 8000a50:	f000 fa49 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000a54:	201b      	movs	r0, #27
 8000a56:	f000 fa62 	bl	8000f1e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	2000007c 	.word	0x2000007c
 8000a74:	40020030 	.word	0x40020030

08000a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_TIM_MspPostInit+0x5c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d118      	bne.n	8000aca <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_TIM_MspPostInit+0x60>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_TIM_MspPostInit+0x60>)
 8000a9e:	f043 0304 	orr.w	r3, r3, #4
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_TIM_MspPostInit+0x60>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0304 	and.w	r3, r3, #4
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4805      	ldr	r0, [pc, #20]	@ (8000adc <HAL_TIM_MspPostInit+0x64>)
 8000ac6:	f000 fc1d 	bl	8001304 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40010800 	.word	0x40010800

08000ae0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <HAL_UART_MspInit+0x88>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d12f      	bne.n	8000b60 <HAL_UART_MspInit+0x80>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0a:	61d3      	str	r3, [r2, #28]
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b30:	2304      	movs	r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <HAL_UART_MspInit+0x90>)
 8000b44:	f000 fbde 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <HAL_UART_MspInit+0x90>)
 8000b5c:	f000 fbd2 	bl	8001304 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40004400 	.word	0x40004400
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010800 	.word	0x40010800

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <NMI_Handler+0x4>

08000b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f89c 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <DMA1_Channel3_IRQHandler+0x10>)
 8000bd2:	f000 fa91 	bl	80010f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000007c 	.word	0x2000007c

08000be0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM1_BRK_IRQHandler+0x10>)
 8000be6:	f001 fc47 	bl	8002478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000034 	.word	0x20000034

08000bf4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	@ (8000c04 <TIM1_UP_IRQHandler+0x10>)
 8000bfa:	f001 fc3d 	bl	8002478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000034 	.word	0x20000034

08000c08 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <TIM1_CC_IRQHandler+0x10>)
 8000c0e:	f001 fc33 	bl	8002478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000034 	.word	0x20000034

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c28:	f7ff fff8 	bl	8000c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c2e:	490c      	ldr	r1, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c30:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c44:	4c09      	ldr	r4, [pc, #36]	@ (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c52:	f002 fe29 	bl	80038a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fb21 	bl	800029c <main>
  bx lr
 8000c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c64:	0800393c 	.word	0x0800393c
  ldr r2, =_sbss
 8000c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c6c:	20000144 	.word	0x20000144

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f923 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fe3c 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	@ (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	@ (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f93b 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f000 f903 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000140 	.word	0x20000140

08000d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	@ (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	20000140 	.word	0x20000140

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4906      	ldr	r1, [pc, #24]	@ (8000dd0 <__NVIC_EnableIRQ+0x34>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	@ (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	@ 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	@ 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff2d 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff42 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff35 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e043      	b.n	8000ff2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <HAL_DMA_Init+0xa8>)
 8000f72:	4413      	add	r3, r2
 8000f74:	4a22      	ldr	r2, [pc, #136]	@ (8001000 <HAL_DMA_Init+0xac>)
 8000f76:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	009a      	lsls	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a1f      	ldr	r2, [pc, #124]	@ (8001004 <HAL_DMA_Init+0xb0>)
 8000f86:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f9e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr
 8000ffc:	bffdfff8 	.word	0xbffdfff8
 8001000:	cccccccd 	.word	0xcccccccd
 8001004:	40020000 	.word	0x40020000

08001008 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d005      	beq.n	800102c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2204      	movs	r2, #4
 8001024:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e051      	b.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 020e 	bic.w	r2, r2, #14
 800103a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a22      	ldr	r2, [pc, #136]	@ (80010dc <HAL_DMA_Abort_IT+0xd4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d029      	beq.n	80010aa <HAL_DMA_Abort_IT+0xa2>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_DMA_Abort_IT+0xd8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d022      	beq.n	80010a6 <HAL_DMA_Abort_IT+0x9e>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a1f      	ldr	r2, [pc, #124]	@ (80010e4 <HAL_DMA_Abort_IT+0xdc>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d01a      	beq.n	80010a0 <HAL_DMA_Abort_IT+0x98>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1e      	ldr	r2, [pc, #120]	@ (80010e8 <HAL_DMA_Abort_IT+0xe0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d012      	beq.n	800109a <HAL_DMA_Abort_IT+0x92>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <HAL_DMA_Abort_IT+0xe4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00a      	beq.n	8001094 <HAL_DMA_Abort_IT+0x8c>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <HAL_DMA_Abort_IT+0xe8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d102      	bne.n	800108e <HAL_DMA_Abort_IT+0x86>
 8001088:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800108c:	e00e      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800108e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001092:	e00b      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 8001094:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001098:	e008      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 800109a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109e:	e005      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a4:	e002      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010a6:	2310      	movs	r3, #16
 80010a8:	e000      	b.n	80010ac <HAL_DMA_Abort_IT+0xa4>
 80010aa:	2301      	movs	r3, #1
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <HAL_DMA_Abort_IT+0xec>)
 80010ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	4798      	blx	r3
    } 
  }
  return status;
 80010d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40020008 	.word	0x40020008
 80010e0:	4002001c 	.word	0x4002001c
 80010e4:	40020030 	.word	0x40020030
 80010e8:	40020044 	.word	0x40020044
 80010ec:	40020058 	.word	0x40020058
 80010f0:	4002006c 	.word	0x4002006c
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	2204      	movs	r2, #4
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4013      	ands	r3, r2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d04f      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xc8>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	2b00      	cmp	r3, #0
 8001128:	d04a      	beq.n	80011c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a66      	ldr	r2, [pc, #408]	@ (80012e8 <HAL_DMA_IRQHandler+0x1f0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d029      	beq.n	80011a6 <HAL_DMA_IRQHandler+0xae>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <HAL_DMA_IRQHandler+0x1f4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d022      	beq.n	80011a2 <HAL_DMA_IRQHandler+0xaa>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a63      	ldr	r2, [pc, #396]	@ (80012f0 <HAL_DMA_IRQHandler+0x1f8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d01a      	beq.n	800119c <HAL_DMA_IRQHandler+0xa4>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a62      	ldr	r2, [pc, #392]	@ (80012f4 <HAL_DMA_IRQHandler+0x1fc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d012      	beq.n	8001196 <HAL_DMA_IRQHandler+0x9e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a60      	ldr	r2, [pc, #384]	@ (80012f8 <HAL_DMA_IRQHandler+0x200>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00a      	beq.n	8001190 <HAL_DMA_IRQHandler+0x98>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a5f      	ldr	r2, [pc, #380]	@ (80012fc <HAL_DMA_IRQHandler+0x204>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d102      	bne.n	800118a <HAL_DMA_IRQHandler+0x92>
 8001184:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001188:	e00e      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 800118a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800118e:	e00b      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 8001190:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001194:	e008      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 8001196:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800119a:	e005      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 800119c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a0:	e002      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 80011a2:	2340      	movs	r3, #64	@ 0x40
 80011a4:	e000      	b.n	80011a8 <HAL_DMA_IRQHandler+0xb0>
 80011a6:	2304      	movs	r3, #4
 80011a8:	4a55      	ldr	r2, [pc, #340]	@ (8001300 <HAL_DMA_IRQHandler+0x208>)
 80011aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8094 	beq.w	80012de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80011be:	e08e      	b.n	80012de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	2202      	movs	r2, #2
 80011c6:	409a      	lsls	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d056      	beq.n	800127e <HAL_DMA_IRQHandler+0x186>
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d051      	beq.n	800127e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10b      	bne.n	8001200 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 020a 	bic.w	r2, r2, #10
 80011f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a38      	ldr	r2, [pc, #224]	@ (80012e8 <HAL_DMA_IRQHandler+0x1f0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d029      	beq.n	800125e <HAL_DMA_IRQHandler+0x166>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a37      	ldr	r2, [pc, #220]	@ (80012ec <HAL_DMA_IRQHandler+0x1f4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d022      	beq.n	800125a <HAL_DMA_IRQHandler+0x162>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a35      	ldr	r2, [pc, #212]	@ (80012f0 <HAL_DMA_IRQHandler+0x1f8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01a      	beq.n	8001254 <HAL_DMA_IRQHandler+0x15c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a34      	ldr	r2, [pc, #208]	@ (80012f4 <HAL_DMA_IRQHandler+0x1fc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d012      	beq.n	800124e <HAL_DMA_IRQHandler+0x156>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a32      	ldr	r2, [pc, #200]	@ (80012f8 <HAL_DMA_IRQHandler+0x200>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00a      	beq.n	8001248 <HAL_DMA_IRQHandler+0x150>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <HAL_DMA_IRQHandler+0x204>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <HAL_DMA_IRQHandler+0x14a>
 800123c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001240:	e00e      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 8001242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001246:	e00b      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 8001248:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800124c:	e008      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 800124e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001252:	e005      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 8001254:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001258:	e002      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 800125a:	2320      	movs	r3, #32
 800125c:	e000      	b.n	8001260 <HAL_DMA_IRQHandler+0x168>
 800125e:	2302      	movs	r3, #2
 8001260:	4a27      	ldr	r2, [pc, #156]	@ (8001300 <HAL_DMA_IRQHandler+0x208>)
 8001262:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001270:	2b00      	cmp	r3, #0
 8001272:	d034      	beq.n	80012de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800127c:	e02f      	b.n	80012de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	2208      	movs	r2, #8
 8001284:	409a      	lsls	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d028      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x1e8>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d023      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	4798      	blx	r3
    }
  }
  return;
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
}
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020008 	.word	0x40020008
 80012ec:	4002001c 	.word	0x4002001c
 80012f0:	40020030 	.word	0x40020030
 80012f4:	40020044 	.word	0x40020044
 80012f8:	40020058 	.word	0x40020058
 80012fc:	4002006c 	.word	0x4002006c
 8001300:	40020000 	.word	0x40020000

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b08b      	sub	sp, #44	@ 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001316:	e169      	b.n	80015ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001318:	2201      	movs	r2, #1
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	429a      	cmp	r2, r3
 8001332:	f040 8158 	bne.w	80015e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4a9a      	ldr	r2, [pc, #616]	@ (80015a4 <HAL_GPIO_Init+0x2a0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d05e      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
 8001340:	4a98      	ldr	r2, [pc, #608]	@ (80015a4 <HAL_GPIO_Init+0x2a0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d875      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 8001346:	4a98      	ldr	r2, [pc, #608]	@ (80015a8 <HAL_GPIO_Init+0x2a4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d058      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
 800134c:	4a96      	ldr	r2, [pc, #600]	@ (80015a8 <HAL_GPIO_Init+0x2a4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d86f      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 8001352:	4a96      	ldr	r2, [pc, #600]	@ (80015ac <HAL_GPIO_Init+0x2a8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d052      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
 8001358:	4a94      	ldr	r2, [pc, #592]	@ (80015ac <HAL_GPIO_Init+0x2a8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d869      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 800135e:	4a94      	ldr	r2, [pc, #592]	@ (80015b0 <HAL_GPIO_Init+0x2ac>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d04c      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
 8001364:	4a92      	ldr	r2, [pc, #584]	@ (80015b0 <HAL_GPIO_Init+0x2ac>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d863      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 800136a:	4a92      	ldr	r2, [pc, #584]	@ (80015b4 <HAL_GPIO_Init+0x2b0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d046      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
 8001370:	4a90      	ldr	r2, [pc, #576]	@ (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d85d      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 8001376:	2b12      	cmp	r3, #18
 8001378:	d82a      	bhi.n	80013d0 <HAL_GPIO_Init+0xcc>
 800137a:	2b12      	cmp	r3, #18
 800137c:	d859      	bhi.n	8001432 <HAL_GPIO_Init+0x12e>
 800137e:	a201      	add	r2, pc, #4	@ (adr r2, 8001384 <HAL_GPIO_Init+0x80>)
 8001380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013d9 	.word	0x080013d9
 800138c:	080013eb 	.word	0x080013eb
 8001390:	0800142d 	.word	0x0800142d
 8001394:	08001433 	.word	0x08001433
 8001398:	08001433 	.word	0x08001433
 800139c:	08001433 	.word	0x08001433
 80013a0:	08001433 	.word	0x08001433
 80013a4:	08001433 	.word	0x08001433
 80013a8:	08001433 	.word	0x08001433
 80013ac:	08001433 	.word	0x08001433
 80013b0:	08001433 	.word	0x08001433
 80013b4:	08001433 	.word	0x08001433
 80013b8:	08001433 	.word	0x08001433
 80013bc:	08001433 	.word	0x08001433
 80013c0:	08001433 	.word	0x08001433
 80013c4:	08001433 	.word	0x08001433
 80013c8:	080013e1 	.word	0x080013e1
 80013cc:	080013f5 	.word	0x080013f5
 80013d0:	4a79      	ldr	r2, [pc, #484]	@ (80015b8 <HAL_GPIO_Init+0x2b4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013d6:	e02c      	b.n	8001432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	623b      	str	r3, [r7, #32]
          break;
 80013de:	e029      	b.n	8001434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	3304      	adds	r3, #4
 80013e6:	623b      	str	r3, [r7, #32]
          break;
 80013e8:	e024      	b.n	8001434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	3308      	adds	r3, #8
 80013f0:	623b      	str	r3, [r7, #32]
          break;
 80013f2:	e01f      	b.n	8001434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	330c      	adds	r3, #12
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e01a      	b.n	8001434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d102      	bne.n	800140c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001406:	2304      	movs	r3, #4
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e013      	b.n	8001434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001414:	2308      	movs	r3, #8
 8001416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	611a      	str	r2, [r3, #16]
          break;
 800141e:	e009      	b.n	8001434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001420:	2308      	movs	r3, #8
 8001422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	615a      	str	r2, [r3, #20]
          break;
 800142a:	e003      	b.n	8001434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
          break;
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x130>
          break;
 8001432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2bff      	cmp	r3, #255	@ 0xff
 8001438:	d801      	bhi.n	800143e <HAL_GPIO_Init+0x13a>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	e001      	b.n	8001442 <HAL_GPIO_Init+0x13e>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3304      	adds	r3, #4
 8001442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2bff      	cmp	r3, #255	@ 0xff
 8001448:	d802      	bhi.n	8001450 <HAL_GPIO_Init+0x14c>
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	e002      	b.n	8001456 <HAL_GPIO_Init+0x152>
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	3b08      	subs	r3, #8
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	210f      	movs	r1, #15
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	401a      	ands	r2, r3
 8001468:	6a39      	ldr	r1, [r7, #32]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	431a      	orrs	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 80b1 	beq.w	80015e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001484:	4b4d      	ldr	r3, [pc, #308]	@ (80015bc <HAL_GPIO_Init+0x2b8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a4c      	ldr	r2, [pc, #304]	@ (80015bc <HAL_GPIO_Init+0x2b8>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b4a      	ldr	r3, [pc, #296]	@ (80015bc <HAL_GPIO_Init+0x2b8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800149c:	4a48      	ldr	r2, [pc, #288]	@ (80015c0 <HAL_GPIO_Init+0x2bc>)
 800149e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	220f      	movs	r2, #15
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a40      	ldr	r2, [pc, #256]	@ (80015c4 <HAL_GPIO_Init+0x2c0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d013      	beq.n	80014f0 <HAL_GPIO_Init+0x1ec>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3f      	ldr	r2, [pc, #252]	@ (80015c8 <HAL_GPIO_Init+0x2c4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00d      	beq.n	80014ec <HAL_GPIO_Init+0x1e8>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a3e      	ldr	r2, [pc, #248]	@ (80015cc <HAL_GPIO_Init+0x2c8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d007      	beq.n	80014e8 <HAL_GPIO_Init+0x1e4>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a3d      	ldr	r2, [pc, #244]	@ (80015d0 <HAL_GPIO_Init+0x2cc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d101      	bne.n	80014e4 <HAL_GPIO_Init+0x1e0>
 80014e0:	2303      	movs	r3, #3
 80014e2:	e006      	b.n	80014f2 <HAL_GPIO_Init+0x1ee>
 80014e4:	2304      	movs	r3, #4
 80014e6:	e004      	b.n	80014f2 <HAL_GPIO_Init+0x1ee>
 80014e8:	2302      	movs	r3, #2
 80014ea:	e002      	b.n	80014f2 <HAL_GPIO_Init+0x1ee>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_GPIO_Init+0x1ee>
 80014f0:	2300      	movs	r3, #0
 80014f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014f4:	f002 0203 	and.w	r2, r2, #3
 80014f8:	0092      	lsls	r2, r2, #2
 80014fa:	4093      	lsls	r3, r2
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001502:	492f      	ldr	r1, [pc, #188]	@ (80015c0 <HAL_GPIO_Init+0x2bc>)
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	492c      	ldr	r1, [pc, #176]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b2a      	ldr	r3, [pc, #168]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	4928      	ldr	r1, [pc, #160]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d006      	beq.n	8001552 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	4922      	ldr	r1, [pc, #136]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001554:	68da      	ldr	r2, [r3, #12]
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	43db      	mvns	r3, r3
 800155a:	491e      	ldr	r1, [pc, #120]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800155c:	4013      	ands	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	4918      	ldr	r1, [pc, #96]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	43db      	mvns	r3, r3
 8001582:	4914      	ldr	r1, [pc, #80]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001584:	4013      	ands	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d021      	beq.n	80015d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001594:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	490e      	ldr	r1, [pc, #56]	@ (80015d4 <HAL_GPIO_Init+0x2d0>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e021      	b.n	80015e6 <HAL_GPIO_Init+0x2e2>
 80015a2:	bf00      	nop
 80015a4:	10320000 	.word	0x10320000
 80015a8:	10310000 	.word	0x10310000
 80015ac:	10220000 	.word	0x10220000
 80015b0:	10210000 	.word	0x10210000
 80015b4:	10120000 	.word	0x10120000
 80015b8:	10110000 	.word	0x10110000
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000
 80015c4:	40010800 	.word	0x40010800
 80015c8:	40010c00 	.word	0x40010c00
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40011400 	.word	0x40011400
 80015d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <HAL_GPIO_Init+0x304>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	43db      	mvns	r3, r3
 80015e0:	4909      	ldr	r1, [pc, #36]	@ (8001608 <HAL_GPIO_Init+0x304>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	3301      	adds	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f ae8e 	bne.w	8001318 <HAL_GPIO_Init+0x14>
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	372c      	adds	r7, #44	@ 0x2c
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e036      	b.n	800168c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8001626:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8001630:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6852      	ldr	r2, [r2, #4]
 800163a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6892      	ldr	r2, [r2, #8]
 8001644:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001646:	f7ff fb6d 	bl	8000d24 <HAL_GetTick>
 800164a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800164c:	e011      	b.n	8001672 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800164e:	f7ff fb69 	bl	8000d24 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 323c 	movw	r2, #4924	@ 0x133c
 800165c:	4293      	cmp	r3, r2
 800165e:	d908      	bls.n	8001672 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e00c      	b.n	800168c <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e6      	bne.n	800164e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001688:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80016a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
	...

080016b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e272      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d4:	4b92      	ldr	r3, [pc, #584]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d00c      	beq.n	80016fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d112      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
 80016ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d10b      	bne.n	8001712 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	4b89      	ldr	r3, [pc, #548]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d06c      	beq.n	80017e0 <HAL_RCC_OscConfig+0x12c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d168      	bne.n	80017e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e24c      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x76>
 800171c:	4b80      	ldr	r3, [pc, #512]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a7f      	ldr	r2, [pc, #508]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e02e      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x98>
 8001732:	4b7b      	ldr	r3, [pc, #492]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a7a      	ldr	r2, [pc, #488]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b78      	ldr	r3, [pc, #480]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a77      	ldr	r2, [pc, #476]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e01d      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0xbc>
 8001756:	4b72      	ldr	r3, [pc, #456]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a71      	ldr	r2, [pc, #452]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b6f      	ldr	r3, [pc, #444]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a6e      	ldr	r2, [pc, #440]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e00b      	b.n	8001788 <HAL_RCC_OscConfig+0xd4>
 8001770:	4b6b      	ldr	r3, [pc, #428]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a6a      	ldr	r2, [pc, #424]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	4b68      	ldr	r3, [pc, #416]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a67      	ldr	r2, [pc, #412]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d013      	beq.n	80017b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fac8 	bl	8000d24 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fac4 	bl	8000d24 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e200      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0xe4>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fab4 	bl	8000d24 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fab0 	bl	8000d24 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	@ 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e1ec      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x10c>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d063      	beq.n	80018b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fa:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b08      	cmp	r3, #8
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
 8001806:	4b46      	ldr	r3, [pc, #280]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d116      	bne.n	8001840 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001812:	4b43      	ldr	r3, [pc, #268]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d001      	beq.n	800182a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e1c0      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b3d      	ldr	r3, [pc, #244]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4939      	ldr	r1, [pc, #228]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183e:	e03a      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800184a:	2201      	movs	r2, #1
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fa69 	bl	8000d24 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff fa65 	bl	8000d24 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e1a1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	4b2d      	ldr	r3, [pc, #180]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001874:	4b2a      	ldr	r3, [pc, #168]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	4927      	ldr	r1, [pc, #156]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
 8001888:	e015      	b.n	80018b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <HAL_RCC_OscConfig+0x270>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fa48 	bl	8000d24 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001898:	f7ff fa44 	bl	8000d24 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e180      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d03a      	beq.n	8001938 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d019      	beq.n	80018fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ca:	4b17      	ldr	r3, [pc, #92]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fa28 	bl	8000d24 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fa24 	bl	8000d24 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e160      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018f6:	2001      	movs	r0, #1
 80018f8:	f000 face 	bl	8001e98 <RCC_Delay>
 80018fc:	e01c      	b.n	8001938 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_RCC_OscConfig+0x274>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fa0e 	bl	8000d24 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fa0a 	bl	8000d24 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d908      	bls.n	800192c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e146      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000
 8001924:	42420000 	.word	0x42420000
 8001928:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b92      	ldr	r3, [pc, #584]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1e9      	bne.n	800190c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80a6 	beq.w	8001a92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10d      	bne.n	8001972 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b88      	ldr	r3, [pc, #544]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	4a87      	ldr	r2, [pc, #540]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001960:	61d3      	str	r3, [r2, #28]
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196e:	2301      	movs	r3, #1
 8001970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001972:	4b82      	ldr	r3, [pc, #520]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800197a:	2b00      	cmp	r3, #0
 800197c:	d118      	bne.n	80019b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a7e      	ldr	r2, [pc, #504]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198a:	f7ff f9cb 	bl	8000d24 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff f9c7 	bl	8000d24 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	@ 0x64
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e103      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	4b75      	ldr	r3, [pc, #468]	@ (8001b7c <HAL_RCC_OscConfig+0x4c8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x312>
 80019b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e02d      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x334>
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a69      	ldr	r2, [pc, #420]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	e01c      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d10c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x356>
 80019f0:	4b61      	ldr	r3, [pc, #388]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a60      	ldr	r2, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a5d      	ldr	r2, [pc, #372]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e00b      	b.n	8001a22 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6213      	str	r3, [r2, #32]
 8001a16:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a57      	ldr	r2, [pc, #348]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d015      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f97b 	bl	8000d24 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a30:	e00a      	b.n	8001a48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff f977 	bl	8000d24 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e0b1      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ee      	beq.n	8001a32 <HAL_RCC_OscConfig+0x37e>
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff f965 	bl	8000d24 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7ff f961 	bl	8000d24 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e09b      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	4b40      	ldr	r3, [pc, #256]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a86:	4b3c      	ldr	r3, [pc, #240]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8087 	beq.w	8001baa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9c:	4b36      	ldr	r3, [pc, #216]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d061      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d146      	bne.n	8001b3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7ff f935 	bl	8000d24 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff f931 	bl	8000d24 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e06d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	4b29      	ldr	r3, [pc, #164]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1f0      	bne.n	8001abe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4921      	ldr	r1, [pc, #132]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a19      	ldr	r1, [r3, #32]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	491b      	ldr	r1, [pc, #108]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff f905 	bl	8000d24 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f901 	bl	8000d24 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e03d      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46a>
 8001b3c:	e035      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_RCC_OscConfig+0x4cc>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f8ee 	bl	8000d24 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f8ea 	bl	8000d24 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e026      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x498>
 8001b6a:	e01e      	b.n	8001baa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e019      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_OscConfig+0x500>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d106      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff f83c 	bl	8000d24 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff f838 	bl	8000d24 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	@ (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff9a 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003908 	.word	0x08003908
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	@ (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb03 f202 	mul.w	r2, r3, r2
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	08003920 	.word	0x08003920
 8001e2c:	08003930 	.word	0x08003930
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	@ (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000000 	.word	0x20000000

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	@ (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003918 	.word	0x08003918

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	@ (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	@ (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08003918 	.word	0x08003918

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e041      	b.n	8001f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd38 	bl	8000970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f000 fe1c 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e041      	b.n	8002008 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d106      	bne.n	8001f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f839 	bl	8002010 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	f000 fdcd 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
	...

08002024 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d855      	bhi.n	80020e4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8002038:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	080020e5 	.word	0x080020e5
 8002048:	080020e5 	.word	0x080020e5
 800204c:	080020e5 	.word	0x080020e5
 8002050:	08002091 	.word	0x08002091
 8002054:	080020e5 	.word	0x080020e5
 8002058:	080020e5 	.word	0x080020e5
 800205c:	080020e5 	.word	0x080020e5
 8002060:	080020ad 	.word	0x080020ad
 8002064:	080020e5 	.word	0x080020e5
 8002068:	080020e5 	.word	0x080020e5
 800206c:	080020e5 	.word	0x080020e5
 8002070:	080020c9 	.word	0x080020c9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002082:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe ffbd 	bl	8001008 <HAL_DMA_Abort_IT>
      break;
 800208e:	e02c      	b.n	80020ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800209e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe ffaf 	bl	8001008 <HAL_DMA_Abort_IT>
      break;
 80020aa:	e01e      	b.n	80020ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ffa1 	bl	8001008 <HAL_DMA_Abort_IT>
      break;
 80020c6:	e010      	b.n	80020ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80020d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe ff93 	bl	8001008 <HAL_DMA_Abort_IT>
      break;
 80020e2:	e002      	b.n	80020ea <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
      break;
 80020e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d157      	bne.n	80021a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 f8c2 	bl	8003282 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d117      	bne.n	8002138 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6a1a      	ldr	r2, [r3, #32]
 800210e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10f      	bne.n	8002138 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a1a      	ldr	r2, [r3, #32]
 800211e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_TIM_PWM_Stop_DMA+0x114>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002142:	4013      	ands	r3, r2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002152:	4013      	ands	r3, r2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_TIM_PWM_Stop_DMA+0x144>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <HAL_TIM_PWM_Stop_DMA+0x154>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002176:	e013      	b.n	80021a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d104      	bne.n	8002188 <HAL_TIM_PWM_Stop_DMA+0x164>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002186:	e00b      	b.n	80021a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	2b08      	cmp	r3, #8
 800218c:	d104      	bne.n	8002198 <HAL_TIM_PWM_Stop_DMA+0x174>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002196:	e003      	b.n	80021a0 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40012c00 	.word	0x40012c00

080021b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e041      	b.n	8002246 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d106      	bne.n	80021dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f839 	bl	800224e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4619      	mov	r1, r3
 80021ee:	4610      	mov	r0, r2
 80021f0:	f000 fcae 	bl	8002b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d104      	bne.n	800227e <HAL_TIM_IC_Start_IT+0x1e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800227a:	b2db      	uxtb	r3, r3
 800227c:	e013      	b.n	80022a6 <HAL_TIM_IC_Start_IT+0x46>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b04      	cmp	r3, #4
 8002282:	d104      	bne.n	800228e <HAL_TIM_IC_Start_IT+0x2e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800228a:	b2db      	uxtb	r3, r3
 800228c:	e00b      	b.n	80022a6 <HAL_TIM_IC_Start_IT+0x46>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d104      	bne.n	800229e <HAL_TIM_IC_Start_IT+0x3e>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800229a:	b2db      	uxtb	r3, r3
 800229c:	e003      	b.n	80022a6 <HAL_TIM_IC_Start_IT+0x46>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d104      	bne.n	80022b8 <HAL_TIM_IC_Start_IT+0x58>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	e013      	b.n	80022e0 <HAL_TIM_IC_Start_IT+0x80>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d104      	bne.n	80022c8 <HAL_TIM_IC_Start_IT+0x68>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	e00b      	b.n	80022e0 <HAL_TIM_IC_Start_IT+0x80>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d104      	bne.n	80022d8 <HAL_TIM_IC_Start_IT+0x78>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e003      	b.n	80022e0 <HAL_TIM_IC_Start_IT+0x80>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022e2:	7bbb      	ldrb	r3, [r7, #14]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d102      	bne.n	80022ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022e8:	7b7b      	ldrb	r3, [r7, #13]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0b8      	b.n	8002464 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_IC_Start_IT+0xa2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002300:	e013      	b.n	800232a <HAL_TIM_IC_Start_IT+0xca>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d104      	bne.n	8002312 <HAL_TIM_IC_Start_IT+0xb2>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002310:	e00b      	b.n	800232a <HAL_TIM_IC_Start_IT+0xca>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start_IT+0xc2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002320:	e003      	b.n	800232a <HAL_TIM_IC_Start_IT+0xca>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d104      	bne.n	800233a <HAL_TIM_IC_Start_IT+0xda>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002338:	e013      	b.n	8002362 <HAL_TIM_IC_Start_IT+0x102>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b04      	cmp	r3, #4
 800233e:	d104      	bne.n	800234a <HAL_TIM_IC_Start_IT+0xea>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002348:	e00b      	b.n	8002362 <HAL_TIM_IC_Start_IT+0x102>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d104      	bne.n	800235a <HAL_TIM_IC_Start_IT+0xfa>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002358:	e003      	b.n	8002362 <HAL_TIM_IC_Start_IT+0x102>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d841      	bhi.n	80023ec <HAL_TIM_IC_Start_IT+0x18c>
 8002368:	a201      	add	r2, pc, #4	@ (adr r2, 8002370 <HAL_TIM_IC_Start_IT+0x110>)
 800236a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236e:	bf00      	nop
 8002370:	080023a5 	.word	0x080023a5
 8002374:	080023ed 	.word	0x080023ed
 8002378:	080023ed 	.word	0x080023ed
 800237c:	080023ed 	.word	0x080023ed
 8002380:	080023b7 	.word	0x080023b7
 8002384:	080023ed 	.word	0x080023ed
 8002388:	080023ed 	.word	0x080023ed
 800238c:	080023ed 	.word	0x080023ed
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023ed 	.word	0x080023ed
 8002398:	080023ed 	.word	0x080023ed
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	080023db 	.word	0x080023db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0202 	orr.w	r2, r2, #2
 80023b2:	60da      	str	r2, [r3, #12]
      break;
 80023b4:	e01d      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f042 0204 	orr.w	r2, r2, #4
 80023c4:	60da      	str	r2, [r3, #12]
      break;
 80023c6:	e014      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0208 	orr.w	r2, r2, #8
 80023d6:	60da      	str	r2, [r3, #12]
      break;
 80023d8:	e00b      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0210 	orr.w	r2, r2, #16
 80023e8:	60da      	str	r2, [r3, #12]
      break;
 80023ea:	e002      	b.n	80023f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d134      	bne.n	8002462 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 ff3e 	bl	8003282 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a18      	ldr	r2, [pc, #96]	@ (800246c <HAL_TIM_IC_Start_IT+0x20c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d00e      	beq.n	800242e <HAL_TIM_IC_Start_IT+0x1ce>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002418:	d009      	beq.n	800242e <HAL_TIM_IC_Start_IT+0x1ce>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <HAL_TIM_IC_Start_IT+0x210>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_TIM_IC_Start_IT+0x1ce>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a12      	ldr	r2, [pc, #72]	@ (8002474 <HAL_TIM_IC_Start_IT+0x214>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d010      	beq.n	8002462 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	e007      	b.n	8002462 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800

08002478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d020      	beq.n	80024dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0202 	mvn.w	r2, #2
 80024ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe f94c 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fb2e 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fe f9fb 	bl	80008cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0204 	mvn.w	r2, #4
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe f926 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fb08 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe f9d5 	bl	80008cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0208 	mvn.w	r2, #8
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2204      	movs	r2, #4
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe f900 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fae2 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7fe f9af 	bl	80008cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0210 	mvn.w	r2, #16
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2208      	movs	r2, #8
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f8da 	bl	8000760 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fabc 	bl	8002b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7fe f989 	bl	80008cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0201 	mvn.w	r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f816 	bl	8000610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 ff1a 	bl	800343c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa89 	bl	8002b3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0220 	mvn.w	r2, #32
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 feed 	bl	800342a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002664:	2300      	movs	r3, #0
 8002666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e088      	b.n	8002788 <HAL_TIM_IC_ConfigChannel+0x130>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002694:	f000 fc52 	bl	8002f3c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 020c 	bic.w	r2, r2, #12
 80026a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	619a      	str	r2, [r3, #24]
 80026ba:	e060      	b.n	800277e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d11c      	bne.n	80026fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80026d2:	f000 fcbb 	bl	800304c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80026e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6999      	ldr	r1, [r3, #24]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	021a      	lsls	r2, r3, #8
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	619a      	str	r2, [r3, #24]
 80026fa:	e040      	b.n	800277e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d11b      	bne.n	800273a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002712:	f000 fd06 	bl	8003122 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020c 	bic.w	r2, r2, #12
 8002724:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69d9      	ldr	r1, [r3, #28]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	61da      	str	r2, [r3, #28]
 8002738:	e021      	b.n	800277e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d11c      	bne.n	800277a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002750:	f000 fd22 	bl	8003198 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002762:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	69d9      	ldr	r1, [r3, #28]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	021a      	lsls	r2, r3, #8
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	61da      	str	r2, [r3, #28]
 8002778:	e001      	b.n	800277e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002786:	7dfb      	ldrb	r3, [r7, #23]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0ae      	b.n	800290c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	f200 809f 	bhi.w	80028fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80027be:	a201      	add	r2, pc, #4	@ (adr r2, 80027c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	080028fd 	.word	0x080028fd
 80027cc:	080028fd 	.word	0x080028fd
 80027d0:	080028fd 	.word	0x080028fd
 80027d4:	08002839 	.word	0x08002839
 80027d8:	080028fd 	.word	0x080028fd
 80027dc:	080028fd 	.word	0x080028fd
 80027e0:	080028fd 	.word	0x080028fd
 80027e4:	0800287b 	.word	0x0800287b
 80027e8:	080028fd 	.word	0x080028fd
 80027ec:	080028fd 	.word	0x080028fd
 80027f0:	080028fd 	.word	0x080028fd
 80027f4:	080028bb 	.word	0x080028bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68b9      	ldr	r1, [r7, #8]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fa14 	bl	8002c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699a      	ldr	r2, [r3, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	699a      	ldr	r2, [r3, #24]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0204 	bic.w	r2, r2, #4
 8002822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6999      	ldr	r1, [r3, #24]
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	619a      	str	r2, [r3, #24]
      break;
 8002836:	e064      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fa5a 	bl	8002cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699a      	ldr	r2, [r3, #24]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6999      	ldr	r1, [r3, #24]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	021a      	lsls	r2, r3, #8
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]
      break;
 8002878:	e043      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	4618      	mov	r0, r3
 8002882:	f000 faa3 	bl	8002dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69da      	ldr	r2, [r3, #28]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0208 	orr.w	r2, r2, #8
 8002894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0204 	bic.w	r2, r2, #4
 80028a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	69d9      	ldr	r1, [r3, #28]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
      break;
 80028b8:	e023      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f000 faed 	bl	8002ea0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	69d9      	ldr	r1, [r3, #28]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	021a      	lsls	r2, r3, #8
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	61da      	str	r2, [r3, #28]
      break;
 80028fa:	e002      	b.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	75fb      	strb	r3, [r7, #23]
      break;
 8002900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800290a:	7dfb      	ldrb	r3, [r7, #23]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_TIM_ConfigClockSource+0x1c>
 800292c:	2302      	movs	r3, #2
 800292e:	e0b4      	b.n	8002a9a <HAL_TIM_ConfigClockSource+0x186>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800294e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002968:	d03e      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0xd4>
 800296a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800296e:	f200 8087 	bhi.w	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002976:	f000 8086 	beq.w	8002a86 <HAL_TIM_ConfigClockSource+0x172>
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297e:	d87f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b70      	cmp	r3, #112	@ 0x70
 8002982:	d01a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xa6>
 8002984:	2b70      	cmp	r3, #112	@ 0x70
 8002986:	d87b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b60      	cmp	r3, #96	@ 0x60
 800298a:	d050      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0x11a>
 800298c:	2b60      	cmp	r3, #96	@ 0x60
 800298e:	d877      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d03c      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xfa>
 8002994:	2b50      	cmp	r3, #80	@ 0x50
 8002996:	d873      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d058      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x13a>
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d86f      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b30      	cmp	r3, #48	@ 0x30
 80029a2:	d064      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	2b30      	cmp	r3, #48	@ 0x30
 80029a6:	d86b      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d060      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029ac:	2b20      	cmp	r3, #32
 80029ae:	d867      	bhi.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d05c      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d05a      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	e062      	b.n	8002a80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029ca:	f000 fc3b 	bl	8003244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	609a      	str	r2, [r3, #8]
      break;
 80029e6:	e04f      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029f8:	f000 fc24 	bl	8003244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e03c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f000 fae8 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2150      	movs	r1, #80	@ 0x50
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fbf2 	bl	8003210 <TIM_ITRx_SetConfig>
      break;
 8002a2c:	e02c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 fb42 	bl	80030c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2160      	movs	r1, #96	@ 0x60
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fbe2 	bl	8003210 <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e01c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 fac8 	bl	8002ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2140      	movs	r1, #64	@ 0x40
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fbd2 	bl	8003210 <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e00c      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f000 fbc9 	bl	8003210 <TIM_ITRx_SetConfig>
      break;
 8002a7e:	e003      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      break;
 8002a84:	e000      	b.n	8002a88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b0c      	cmp	r3, #12
 8002ab6:	d831      	bhi.n	8002b1c <HAL_TIM_ReadCapturedValue+0x78>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002af5 	.word	0x08002af5
 8002ac4:	08002b1d 	.word	0x08002b1d
 8002ac8:	08002b1d 	.word	0x08002b1d
 8002acc:	08002b1d 	.word	0x08002b1d
 8002ad0:	08002aff 	.word	0x08002aff
 8002ad4:	08002b1d 	.word	0x08002b1d
 8002ad8:	08002b1d 	.word	0x08002b1d
 8002adc:	08002b1d 	.word	0x08002b1d
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	08002b1d 	.word	0x08002b1d
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b1d 	.word	0x08002b1d
 8002af0:	08002b13 	.word	0x08002b13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afa:	60fb      	str	r3, [r7, #12]

      break;
 8002afc:	e00f      	b.n	8002b1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b04:	60fb      	str	r3, [r7, #12]

      break;
 8002b06:	e00a      	b.n	8002b1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0e:	60fb      	str	r3, [r7, #12]

      break;
 8002b10:	e005      	b.n	8002b1e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	60fb      	str	r3, [r7, #12]

      break;
 8002b1a:	e000      	b.n	8002b1e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002b1c:	bf00      	nop
  }

  return tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop

08002b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr

08002b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a2f      	ldr	r2, [pc, #188]	@ (8002c20 <TIM_Base_SetConfig+0xd0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d00b      	beq.n	8002b80 <TIM_Base_SetConfig+0x30>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6e:	d007      	beq.n	8002b80 <TIM_Base_SetConfig+0x30>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a2c      	ldr	r2, [pc, #176]	@ (8002c24 <TIM_Base_SetConfig+0xd4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d003      	beq.n	8002b80 <TIM_Base_SetConfig+0x30>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c28 <TIM_Base_SetConfig+0xd8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d108      	bne.n	8002b92 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <TIM_Base_SetConfig+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00b      	beq.n	8002bb2 <TIM_Base_SetConfig+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba0:	d007      	beq.n	8002bb2 <TIM_Base_SetConfig+0x62>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8002c24 <TIM_Base_SetConfig+0xd4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d003      	beq.n	8002bb2 <TIM_Base_SetConfig+0x62>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <TIM_Base_SetConfig+0xd8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d108      	bne.n	8002bc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <TIM_Base_SetConfig+0xd0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	611a      	str	r2, [r3, #16]
  }
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40000400 	.word	0x40000400
 8002c28:	40000800 	.word	0x40000800

08002c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f023 0302 	bic.w	r3, r3, #2
 8002c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf4 <TIM_OC1_SetConfig+0xc8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d10c      	bne.n	8002ca2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f023 0308 	bic.w	r3, r3, #8
 8002c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 0304 	bic.w	r3, r3, #4
 8002ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <TIM_OC1_SetConfig+0xc8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	621a      	str	r2, [r3, #32]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40012c00 	.word	0x40012c00

08002cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 0210 	bic.w	r2, r3, #16
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0320 	bic.w	r3, r3, #32
 8002d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	@ (8002dc8 <TIM_OC2_SetConfig+0xd0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d10d      	bne.n	8002d74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a14      	ldr	r2, [pc, #80]	@ (8002dc8 <TIM_OC2_SetConfig+0xd0>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d113      	bne.n	8002da4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00

08002dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a1d      	ldr	r2, [pc, #116]	@ (8002e9c <TIM_OC3_SetConfig+0xd0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a14      	ldr	r2, [pc, #80]	@ (8002e9c <TIM_OC3_SetConfig+0xd0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d113      	bne.n	8002e76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	621a      	str	r2, [r3, #32]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40012c00 	.word	0x40012c00

08002ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	031b      	lsls	r3, r3, #12
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <TIM_OC4_SetConfig+0x98>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d109      	bne.n	8002f14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	40012c00 	.word	0x40012c00

08002f3c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	f023 0201 	bic.w	r2, r3, #1
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <TIM_TI1_SetConfig+0xa8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00b      	beq.n	8002f82 <TIM_TI1_SetConfig+0x46>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f70:	d007      	beq.n	8002f82 <TIM_TI1_SetConfig+0x46>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe8 <TIM_TI1_SetConfig+0xac>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d003      	beq.n	8002f82 <TIM_TI1_SetConfig+0x46>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fec <TIM_TI1_SetConfig+0xb0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d101      	bne.n	8002f86 <TIM_TI1_SetConfig+0x4a>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <TIM_TI1_SetConfig+0x4c>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e003      	b.n	8002fa6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 030a 	bic.w	r3, r3, #10
 8002fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 030a 	and.w	r3, r3, #10
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800

08002ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0201 	bic.w	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800301a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 030a 	bic.w	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f023 0210 	bic.w	r2, r3, #16
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4313      	orrs	r3, r2
 8003082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800308a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	031b      	lsls	r3, r3, #12
 8003090:	b29b      	uxth	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800309e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	621a      	str	r2, [r3, #32]
}
 80030ba:	bf00      	nop
 80030bc:	371c      	adds	r7, #28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f023 0210 	bic.w	r2, r3, #16
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	031b      	lsls	r3, r3, #12
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003100:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 0303 	bic.w	r3, r3, #3
 800314e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800315e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	b2db      	uxtb	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003172:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	031b      	lsls	r3, r3, #12
 80031dc:	b29b      	uxth	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	031b      	lsls	r3, r3, #12
 80031f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	621a      	str	r2, [r3, #32]
}
 8003206:	bf00      	nop
 8003208:	371c      	adds	r7, #28
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003226:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	f043 0307 	orr.w	r3, r3, #7
 8003232:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	609a      	str	r2, [r3, #8]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr

08003244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800325e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	021a      	lsls	r2, r3, #8
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	431a      	orrs	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	609a      	str	r2, [r3, #8]
}
 8003278:	bf00      	nop
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003282:	b480      	push	{r7}
 8003284:	b087      	sub	sp, #28
 8003286:	af00      	add	r7, sp, #0
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2201      	movs	r2, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	401a      	ands	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1a      	ldr	r2, [r3, #32]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e046      	b.n	8003372 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a16      	ldr	r2, [pc, #88]	@ (800337c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d00e      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003330:	d009      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10c      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bc80      	pop	{r7}
 800337a:	4770      	bx	lr
 800337c:	40012c00 	.word	0x40012c00
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800

08003388 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e03d      	b.n	8003420 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e042      	b.n	80034e6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd fb33 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2224      	movs	r2, #36	@ 0x24
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f972 	bl	800377c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034a6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034b6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034c6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b08a      	sub	sp, #40	@ 0x28
 80034f2:	af02      	add	r7, sp, #8
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	d175      	bne.n	80035fa <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HAL_UART_Transmit+0x2c>
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e06e      	b.n	80035fc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2221      	movs	r2, #33	@ 0x21
 8003528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800352c:	f7fd fbfa 	bl	8000d24 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003546:	d108      	bne.n	800355a <HAL_UART_Transmit+0x6c>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	e003      	b.n	8003562 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003562:	e02e      	b.n	80035c2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2180      	movs	r1, #128	@ 0x80
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f848 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d005      	beq.n	8003586 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e03a      	b.n	80035fc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800359a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	3302      	adds	r3, #2
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e007      	b.n	80035b4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	3301      	adds	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1cb      	bne.n	8003564 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	@ 0x40
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f814 	bl	8003604 <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e006      	b.n	80035fc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3720      	adds	r7, #32
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003614:	e03b      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361c:	d037      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7fd fb81 	bl	8000d24 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	6a3a      	ldr	r2, [r7, #32]
 800362a:	429a      	cmp	r2, r3
 800362c:	d302      	bcc.n	8003634 <UART_WaitOnFlagUntilTimeout+0x30>
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e03a      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d023      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d020      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b40      	cmp	r3, #64	@ 0x40
 8003650:	d01d      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d116      	bne.n	800368e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f81d 	bl	80036b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2208      	movs	r2, #8
 8003680:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d0b4      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b095      	sub	sp, #84	@ 0x54
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	330c      	adds	r3, #12
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	e853 3f00 	ldrex	r3, [r3]
 80036cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036de:	643a      	str	r2, [r7, #64]	@ 0x40
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e5      	bne.n	80036be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	61fb      	str	r3, [r7, #28]
   return(result);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800371a:	e841 2300 	strex	r3, r2, [r1]
 800371e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1e5      	bne.n	80036f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	2b01      	cmp	r3, #1
 800372c:	d119      	bne.n	8003762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	330c      	adds	r3, #12
 8003734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	60bb      	str	r3, [r7, #8]
   return(result);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f023 0310 	bic.w	r3, r3, #16
 8003744:	647b      	str	r3, [r7, #68]	@ 0x44
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800374e:	61ba      	str	r2, [r7, #24]
 8003750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6979      	ldr	r1, [r7, #20]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	613b      	str	r3, [r7, #16]
   return(result);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e5      	bne.n	800372e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003770:	bf00      	nop
 8003772:	3754      	adds	r7, #84	@ 0x54
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
	...

0800377c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80037b6:	f023 030c 	bic.w	r3, r3, #12
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699a      	ldr	r2, [r3, #24]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2c      	ldr	r2, [pc, #176]	@ (8003890 <UART_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037e4:	f7fe fb44 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	e002      	b.n	80037f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037ec:	f7fe fb2c 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80037f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009a      	lsls	r2, r3, #2
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	4a22      	ldr	r2, [pc, #136]	@ (8003894 <UART_SetConfig+0x118>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	0119      	lsls	r1, r3, #4
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fbb2 f2f3 	udiv	r2, r2, r3
 8003828:	4b1a      	ldr	r3, [pc, #104]	@ (8003894 <UART_SetConfig+0x118>)
 800382a:	fba3 0302 	umull	r0, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2064      	movs	r0, #100	@ 0x64
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	@ 0x32
 800383c:	4a15      	ldr	r2, [pc, #84]	@ (8003894 <UART_SetConfig+0x118>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003848:	4419      	add	r1, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009a      	lsls	r2, r3, #2
 8003854:	441a      	add	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003860:	4b0c      	ldr	r3, [pc, #48]	@ (8003894 <UART_SetConfig+0x118>)
 8003862:	fba3 0302 	umull	r0, r3, r3, r2
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	2064      	movs	r0, #100	@ 0x64
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	3332      	adds	r3, #50	@ 0x32
 8003874:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <UART_SetConfig+0x118>)
 8003876:	fba2 2303 	umull	r2, r3, r2, r3
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	f003 020f 	and.w	r2, r3, #15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	440a      	add	r2, r1
 8003886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40013800 	.word	0x40013800
 8003894:	51eb851f 	.word	0x51eb851f

08003898 <memset>:
 8003898:	4603      	mov	r3, r0
 800389a:	4402      	add	r2, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <__libc_init_array>:
 80038a8:	b570      	push	{r4, r5, r6, lr}
 80038aa:	2600      	movs	r6, #0
 80038ac:	4d0c      	ldr	r5, [pc, #48]	@ (80038e0 <__libc_init_array+0x38>)
 80038ae:	4c0d      	ldr	r4, [pc, #52]	@ (80038e4 <__libc_init_array+0x3c>)
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	42a6      	cmp	r6, r4
 80038b6:	d109      	bne.n	80038cc <__libc_init_array+0x24>
 80038b8:	f000 f81a 	bl	80038f0 <_init>
 80038bc:	2600      	movs	r6, #0
 80038be:	4d0a      	ldr	r5, [pc, #40]	@ (80038e8 <__libc_init_array+0x40>)
 80038c0:	4c0a      	ldr	r4, [pc, #40]	@ (80038ec <__libc_init_array+0x44>)
 80038c2:	1b64      	subs	r4, r4, r5
 80038c4:	10a4      	asrs	r4, r4, #2
 80038c6:	42a6      	cmp	r6, r4
 80038c8:	d105      	bne.n	80038d6 <__libc_init_array+0x2e>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
 80038cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d0:	4798      	blx	r3
 80038d2:	3601      	adds	r6, #1
 80038d4:	e7ee      	b.n	80038b4 <__libc_init_array+0xc>
 80038d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038da:	4798      	blx	r3
 80038dc:	3601      	adds	r6, #1
 80038de:	e7f2      	b.n	80038c6 <__libc_init_array+0x1e>
 80038e0:	08003934 	.word	0x08003934
 80038e4:	08003934 	.word	0x08003934
 80038e8:	08003934 	.word	0x08003934
 80038ec:	08003938 	.word	0x08003938

080038f0 <_init>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr

080038fc <_fini>:
 80038fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fe:	bf00      	nop
 8003900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003902:	bc08      	pop	{r3}
 8003904:	469e      	mov	lr, r3
 8003906:	4770      	bx	lr
